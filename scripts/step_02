#!/bin/bash

# Step 2: Scrape BoardGameGeek for publisher information
# This script handles virtual environment activation and runs the Python script

set -e  # Exit on any error

SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
cd "$SCRIPT_DIR/.."

echo "üé≤ Essen Route Planning - Step 2: Scrape BGG"
echo "==========================================="

# Check if virtual environment exists
if [ ! -d "venv" ]; then
    echo "‚ùå Error: Virtual environment not found!"
    echo "   Please run: python3 -m venv venv"
    echo "   Then: source venv/bin/activate && pip install -r requirements.txt"
    exit 1
fi

# Check if step 1 output exists
if [ ! -f "data/output/target_games.json" ]; then
    echo "‚ùå Error: target_games.json not found!"
    echo "   Please run ./step_01 first"
    exit 1
fi

# Activate virtual environment and run the script
echo "üêç Activating virtual environment..."
source venv/bin/activate

echo "‚ö†Ô∏è  Note: BGG scraping uses human-like delays (1-3 seconds between requests)"
echo "   This is intentional to respect BGG's servers."

# Calculate estimated time based on target games
if [ -f "data/output/target_games.json" ]; then
    TOTAL_GAMES=$(python3 -c "
import json
with open('data/output/target_games.json', 'r') as f:
    data = json.load(f)
    if isinstance(data, list):
        print(len(data))
    else:
        print(len(data.get('games', [])))
")
    if [ "$TOTAL_GAMES" -gt 0 ]; then
        # Average 2 seconds per game (1-3 second range)
        ESTIMATED_MINUTES=$((TOTAL_GAMES * 2 / 60))
        if [ "$ESTIMATED_MINUTES" -eq 0 ]; then
            echo "   Estimated time: ~30 seconds for $TOTAL_GAMES games"
        else
            echo "   Estimated time: ~$ESTIMATED_MINUTES minutes for $TOTAL_GAMES games"
        fi
    fi
fi
echo ""
echo "‚ñ∂Ô∏è  Running step 2..."
echo "   Usage: ./step_02 [--test|--full|--use-cache]"
python src/steps/step2_scrape_bgg.py "$@"

echo ""
echo "‚úÖ Step 2 complete!"
echo "   Next: Run ./step_03 to fetch Essen exhibitor data"